from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import InlineKeyboardMarkup, \
    InlineKeyboardButton
import sqlite3
import datetime as dt
from Vk import search_group
import asyncio

from config import load_BOT
from app import app

TG_TOKEN = load_BOT(app.root_path)


def bd_record(id, id_first, id_last, group_id, now, group_name):
    conn = sqlite3.connect(app.config['DATABASE'])
    cur = conn.cursor()
    print(f"SELECT * FROM users WHERE id_group =={group_id};")
    cur.execute(f"SELECT * FROM users WHERE id_group =={group_id};")
    one_result = cur.fetchone()
    if one_result:
        return '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É ' + group_name
    else:
        cur.execute("""INSERT INTO users(id, first, last, id_group, sub_date, name_group) VALUES (?,?,?,?,?,?);""",
                    (id, id_first, id_last, group_id, now, group_name))
        conn.commit()
    return '–ì—Ä—É–ø–ø–∞ ' + group_name + ' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'


# xcv
def bd_read(id):
    conn = sqlite3.connect(app.config['DATABASE'])
    cur = conn.cursor()
    cur.execute(f"SELECT sub_date, name_group, id_group FROM users WHERE id == {id};")
    result = cur.fetchall()
    if result:
        return result
    else:
        return None


# bot init
PROXY_URL = "http://167.235.144.131:8080"

#bot = Bot(proxy=PROXY_URL, token=TG_TOKEN)
bot = Bot(token=TG_TOKEN)
dp = Dispatcher(bot)

btn_search = InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!üòÅ', callback_data='btn_search')
btn_help = InlineKeyboardButton('–ü–æ–º–æ–≥–∏—Ç–µüò•', callback_data='btn_help')
btn_group = InlineKeyboardButton('–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data='btn_group')
btn_all_user = InlineKeyboardButton('–í—Å–µ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–∏', callback_data='btn_all_user')
btn_id_user = InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='btn_id_user')

# add inline buttons([help], [start searching]) to inline keyboard
keyboard_help_search = InlineKeyboardMarkup(resize_keyboard=True).add(btn_search, btn_group, btn_all_user, btn_id_user,
                                                                      btn_help)


# command processing(start)
@dp.message_handler(commands=['start'])
async def process_start(msg: types.Message):
    await msg.answer('–ü—Ä–∏–≤–µ—Ç!üëã\n'
                     '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ\n'
                     '–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏—Ö –Ω–æ–≤–æ—Å—Ç–∏üòé.–í–Ω–∏–º–∞–Ω–∏–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ—Å–∫–æ–ª—å–∫–æ'
                     '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sqlite, –∞ —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ heroku –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è',
                     reply_markup=keyboard_help_search)


# answer for button help
@dp.callback_query_handler(text='btn_help')
async def process_callback_btn_help(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ! ' + callback_query.from_user.first_name + ' ' \
                           + callback_query.from_user.last_name + ' —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –Ω–æ–≤–æ—Å—Ç–µ–π')
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é', reply_markup=keyboard_help_search)


# answer for bd
@dp.callback_query_handler(text='btn_all_user')
async def process_callback_btn_all_user(callback_query: types.CallbackQuery):
    conn = sqlite3.connect(app.config['DATABASE'])
    cur = conn.cursor()
    cur.execute(f"SELECT DISTINCT id, first, last FROM users")
    result = cur.fetchall()
    if result:
        await bot.send_message(callback_query.from_user.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        for i in result:
            s = 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  ' + str(i[0]) + ' –ò–º—è: ' + i[1] + ' –§–∞–º–∏–ª–∏—è: ' + i[2]
            await bot.send_message(callback_query.from_user.id, s)
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", reply_markup=keyboard_help_search)

    else:
        await bot.send_message(callback_query.from_user.id, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞')


# answer for id_user
@dp.callback_query_handler(text='btn_id_user')
async def process_callback_id_user(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    @dp.message_handler()
    async def process_id(msg: types.Message):
        id = msg.text
        res = bd_read(id)
        if res is None:
            await bot.send_message(callback_query.from_user.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç')
        else:
            await bot.send_message(callback_query.from_user.id, '–£ –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏')
            for i in res:
                date = dt.datetime.fromisoformat(i[0])
                s = '–ì—Ä—É–ø–ø–∞ ' + i[1] + f" https://vk.com/public{i[2]}" + '\n –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ' + str(date)
                await bot.send_message(callback_query.from_user.id, s)
            await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", reply_markup=keyboard_help_search)
            pass


# answer for button group
@dp.callback_query_handler(text='btn_group')
async def process_callback_btn_group(callback_query: types.CallbackQuery):
    id = callback_query.from_user.id
    res = bd_read(id)
    if res is None:
        await bot.send_message(callback_query.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É ')
    else:
        await bot.send_message(callback_query.from_user.id, '–£ –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏')
        for i in res:
            date = dt.datetime.fromisoformat(i[0])
            s = '–ì—Ä—É–ø–ø–∞ ' + i[1] + f" https://vk.com/public{i[2]}" + '\n –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ' + str(date)
            await bot.send_message(callback_query.from_user.id, s)
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", reply_markup=keyboard_help_search)
        pass


# answer for button search
@dp.callback_query_handler(text='btn_search')
async def process_callback_btn_search(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!üòä\n'
                                                        '–í–≤–µ–¥–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å,\n'
                                                        '–∞ —è –ø–æ–∏—â—É –ø–æ—Ö–æ–∂–∏–µ –≥—Ä—É–ø–ø—ã –≤–æ –í–∫–æ–Ω—Ç–∞–∫—Ç–µüôÉ.')

    # search groups
    @dp.message_handler()
    async def process_search(msg: types.Message):
        groups = search_group(msg)
        # name_ids = json.load(open('name_ids.json'))
        # print(name_ids)
        all_id = []

        # add inline keyboard for founded groups
        keyboard_groups = InlineKeyboardMarkup(resize_keyboard=True)

        if len(groups) != 0:
            await msg.answer('–ù–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ–±—èüòâ.')
            for group in groups:
                group_name = group['name']
                id = group['id']
                # name_ids.update({id: group_name})
                all_id.append(str(id))
                await msg.answer(f"{group_name}\n"
                                 f"https://vk.com/public{id}")
                button_group = InlineKeyboardButton(group_name, callback_data=str(id))
                keyboard_groups.insert(button_group)
            # choose the groups
            await msg.answer('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É(-—ã), –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä–æ–π(-—ã—Ö) —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—èüòâ.',
                             reply_markup=keyboard_groups)

            @dp.callback_query_handler(text=all_id)
            async def process_callback_group(callback_query: types.CallbackQuery):
                usr_id = str(callback_query.from_user.id)
                id_first = callback_query.from_user.first_name
                id_last = callback_query.from_user.last_name
                group_id = int(callback_query['data'])
                name_group = ''.join([x['name'] for x in groups if x['id'] == group_id])
                now = dt.datetime.now().replace(second=0, microsecond=0).isoformat()
                await msg.answer(bd_record(usr_id, id_first, id_last, group_id, now, name_group))
                await msg.answer('–ø—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=keyboard_help_search)

        # not find groups
        else:
            await msg.answer('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–ºü§î...')
            await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é', reply_markup=keyboard_help_search)


# main program
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    executor.start_polling(dp, skip_updates=True)
